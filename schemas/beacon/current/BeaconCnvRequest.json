{
   "$id" : "https://schemablocks.org/schemas/beacon/BeaconCnvRequest/v1.1.0",
   "$schema" : "http://json-schema.org/draft-07/schema#",
   "description" : "CNV request against Beacon resources.  \n\nTODO: The documented queries will fail current tests due to the lack of the\n`referenceBases` parameter.\n",
   "examples" : [
      {
         "assemblyId" : "GRCh38",
         "datasetIds" : [
            "arraymap",
            "progenetix"
         ],
         "endMax" : "26000000",
         "endMin" : "21967753",
         "referenceName" : "9",
         "startMax" : "21975098",
         "startMin" : "18000000",
         "variantType" : "DEL"
      }
   ],
   "meta" : {
      "contributors" : [
         {
            "description" : "Michael Baudis",
            "id" : "orcid:0000-0002-9903-4248"
         },
         {
            "description" : "Beacon developers..."
         }
      ],
      "provenance" : [
         {
            "description" : "Beacon API",
            "id" : "https://github.com/ga4gh-beacon/specification/"
         }
      ],
      "sb_status" : "proposed",
      "used_by" : [
         {
            "description" : "Beacon",
            "id" : "https://github.com/ga4gh-beacon/specification/blob/master/beacon.yaml"
         },
         {
            "description" : "Progenetix database schema (Beacon+ backend)",
            "id" : "https://github.com/progenetix/schemas/tree/master/main/yaml"
         }
      ]
   },
   "properties" : {
      "assemblyId" : {
         "description" : "Assembly identifier (GRC notation, e.g. `GRCh37`).",
         "examples" : [
            "GRCh38"
         ],
         "type" : "string"
      },
      "datasetIds" : {
         "description" : "Identifiers of datasets, as defined in `BeaconDataset`. If this\nfield is null/not specified, all datasets should be queried.\n",
         "examples" : [
            [
               "arraymap",
               "TCGA"
            ]
         ],
         "items" : "string",
         "type" : "array"
      },
      "endMax" : {
         "description" : "Maximum end coordinate. See startMin.",
         "examples" : [
            "344452",
            "244238579"
         ],
         "format" : "int64",
         "minimum" : "1",
         "type" : "integer"
      },
      "endMin" : {
         "description" : "Minimum end coordinate. See startMin.",
         "examples" : [
            "34",
            "244238578"
         ],
         "format" : "int64",
         "minimum" : "0",
         "type" : "integer"
      },
      "includeDatasetResponses" : {
         "description" : "Indicator of whether responses for individual datasets (datasetAlleleResponses) should be included in the response (BeaconAlleleResponse) to this request or not. If null (not specified), the default value of NONE is assumed.",
         "enum" : [
            "ALL",
            "HIT",
            "MISS",
            "NONE"
         ],
         "type" : "string"
      },
      "referenceName" : {
         "allof" : [
            {
               "$ref" : "https://schemablocks.org/schemas/beacon/v1.1.0/Chromosome.json"
            },
            {
               "description" : "Chromosome as string\n",
               "examples" : [
                  "22",
                  "Y"
               ]
            }
         ]
      },
      "startMax" : {
         "description" : "Maximum start coordinate. See startMin.",
         "examples" : [
            "6298006",
            "243998770"
         ],
         "format" : "int64",
         "minimum" : "1",
         "type" : "integer"
      },
      "startMin" : {
         "description" : "Minimum start coordinate\n* startMin + startMax + endMin + endMax\n - for querying imprecise positions (e.g. identifying all structural\n variants starting anywhere between startMin <-> startMax, and ending\n anywhere between endMin <-> endMax)\n - single or double sided precise matches can be achieved by setting\n startMax = startMin+1 XOR endMax = endMin+1 (0-based, interbase \n coordinates)\n",
         "examples" : [
            "0",
            "6298005"
         ],
         "format" : "int64",
         "minimum" : "0",
         "type" : "integer"
      },
      "variantType" : {
         "description" : "The `variantType` is used to denote the type of structural variant.\n\nUse in `BeaconCnvRequest`:\n* DUP: duplication of sequence following `start`; not necessarily in\nsitu\n* DEL: deletion of sequence following `start`\n* CNV: either DUP or DEL or CNV\n",
         "examples" : [
            "DUP",
            "DEL"
         ],
         "type" : "string"
      }
   },
   "required" : [
      "referenceName",
      "startMin",
      "startMax",
      "endMin",
      "endMax",
      "variantType",
      "assemblyId"
   ],
   "title" : "BeaconCnvRequest",
   "type" : "object"
}

